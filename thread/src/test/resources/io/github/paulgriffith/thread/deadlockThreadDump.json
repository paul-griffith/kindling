{
  "version": "8.1.16.2022040511",
  "deadlocks": [
    676,
    683,
    684
  ],
  "threads": [
    {
      "name": "alarm-notification-pipeline[Notify]",
      "id": 204,
      "state": "WAITING",
      "daemon": false,
      "system": "Alarms",
      "scope": "Gateway",
      "cpuUsage": 0,
      "waitingFor": {
        "lock": "java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@103f15b2"
      },
      "stacktrace": [
        "java.base@11.0.14.1/jdk.internal.misc.Unsafe.park(Native Method)",
        "java.base@11.0.14.1/java.util.concurrent.locks.LockSupport.park(Unknown Source)",
        "java.base@11.0.14.1/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(Unknown Source)",
        "java.base@11.0.14.1/java.util.concurrent.LinkedBlockingQueue.take(Unknown Source)",
        "com.inductiveautomation.ignition.alarming.pipelines.SingleThreadAlarmPipeline$QueueEvaluator.run(SingleThreadAlarmPipeline.java:164)",
        "java.base@11.0.14.1/java.lang.Thread.run(Unknown Source)"
      ]
    },
    {
      "name": "cron4j::scheduler[reporting]::executor[ebbf3213253c522e73a7fe9100000180abe8c38322649653]",
      "id": 676,
      "state": "BLOCKED",
      "daemon": false,
      "system": "Reporting",
      "scope": "Gateway",
      "cpuUsage": 0,
      "waitingFor": {
        "lock": "java.lang.String@38be24e8",
        "owner": 683
      },
      "stacktrace": [
        "java.desktop@11.0.14.1/sun.font.SunFontManager.findJREDeferredFont(Unknown Source)",
        "java.desktop@11.0.14.1/sun.font.SunFontManager.findFont2D(Unknown Source)",
        "java.desktop@11.0.14.1/java.awt.Font.getFont2D(Unknown Source)",
        "java.desktop@11.0.14.1/java.awt.Font.canDisplay(Unknown Source)",
        "com.inductiveautomation.rm.text.RMFontFile.canDisplay(RMFontFile.java:327)",
        "com.inductiveautomation.rm.text.RMFont.canDisplay(RMFont.java:295)",
        "com.inductiveautomation.rm.text.RMXStringUtils.getRepresentableString(RMXStringUtils.java:159)",
        "com.inductiveautomation.rm.text.RMXString.getRepresentableString(RMXString.java:659)",
        "com.inductiveautomation.rm.text.RMTextLayout.layoutText(RMTextLayout.java:136)",
        "com.inductiveautomation.rm.text.RMTextLayout.layout(RMTextLayout.java:120)",
        "com.inductiveautomation.rm.shape.RMTextShape.getTextLayout(RMTextShape.java:803)",
        "com.inductiveautomation.rm.shape.RMTextShape.computePrefHeight(RMTextShape.java:874)",
        "com.inductiveautomation.rm.shape.RMShape.getPrefHeight(RMShape.java:2255)",
        "com.inductiveautomation.rm.shape.RMSpringLayout$SnapSpringLayout.getPrefHeight(RMSpringLayout.java:211)",
        "com.inductiveautomation.rm.shape.RMSpringLayout$SnapSpringLayout.getPrefHeight(RMSpringLayout.java:114)",
        "com.inductiveautomation.snap.ui.SpringLayout.getBestHeight(SpringLayout.java:307)",
        "com.inductiveautomation.snap.ui.SpringSizer$Box.<init>(SpringSizer.java:195)",
        "com.inductiveautomation.snap.ui.SpringSizer.getChildBoxes(SpringSizer.java:66)",
        "com.inductiveautomation.snap.ui.SpringSizer.getPrefHeight(SpringSizer.java:45)",
        "com.inductiveautomation.snap.ui.SpringLayout.getPrefHeight(SpringLayout.java:203)",
        "com.inductiveautomation.rm.shape.RMSpringLayout.computePrefHeight(RMSpringLayout.java:52)",
        "com.inductiveautomation.rm.shape.RMParentShape.computePrefHeight(RMParentShape.java:410)",
        "com.inductiveautomation.rm.shape.RMTableRowRPG.computePrefHeight(RMTableRowRPG.java:466)",
        "com.inductiveautomation.rm.shape.RMShape.getPrefHeight(RMShape.java:2255)",
        "com.inductiveautomation.rm.shape.RMShape.getBestHeight(RMShape.java:2301)",
        "com.inductiveautomation.rm.shape.RMShape.getBestHeight(RMShape.java:2294)",
        "com.inductiveautomation.rm.shape.RMShape.setBestHeight(RMShape.java:2308)",
        "com.inductiveautomation.rm.shape.RMTableRowRPG.rpgAll(RMTableRowRPG.java:58)",
        "com.inductiveautomation.rm.shape.RMTableRPG.addRows(RMTableRPG.java:288)",
        "com.inductiveautomation.rm.shape.RMTableRPG.rpgTable(RMTableRPG.java:170)",
        "com.inductiveautomation.rm.shape.RMTableRPG.rpgWithScaling(RMTableRPG.java:101)",
        "com.inductiveautomation.rm.shape.RMTableGroupRPG.rpgAll(RMTableGroupRPG.java:66)",
        "com.inductiveautomation.rm.shape.RMTableGroup.rpgAll(RMTableGroup.java:339)",
        "com.inductiveautomation.rm.shape.ReportOwner.rpg(ReportOwner.java:178)",
        "com.inductiveautomation.rm.shape.RMParentShape.rpgChildren(RMParentShape.java:597)",
        "com.inductiveautomation.rm.shape.RMPage.rpgChildren(RMPage.java:696)",
        "com.inductiveautomation.rm.shape.RMParentShape.rpgAll(RMParentShape.java:584)",
        "com.inductiveautomation.rm.shape.RMPage.rpgAll(RMPage.java:659)",
        "com.inductiveautomation.rm.shape.ReportOwner.rpg(ReportOwner.java:178)",
        "com.inductiveautomation.rm.shape.RMDocument.rpgChildren(RMDocument.java:1091)",
        "com.inductiveautomation.rm.shape.RMParentShape.rpgAll(RMParentShape.java:584)",
        "com.inductiveautomation.rm.shape.ReportOwner.rpg(ReportOwner.java:178)",
        "com.inductiveautomation.rm.shape.ReportOwner.generateReport(ReportOwner.java:169)",
        "com.inductiveautomation.rm.shape.RMDocument.generateReport(RMDocument.java:1067)",
        "com.inductiveautomation.rm.shape.RMDocument.generateReport(RMDocument.java:1035)",
        "com.inductiveautomation.reporting.gateway.scheduler.ReportSchedulerTask.run(ReportSchedulerTask.java:215)",
        "app//it.sauronsoftware.cron4j.RunnableTask.execute(Unknown Source)",
        "app//it.sauronsoftware.cron4j.TaskExecutor$Runner.run(Unknown Source)",
        "java.base@11.0.14.1/java.lang.Thread.run(Unknown Source)"
      ]
    },
    {
      "name": "cron4j::scheduler[reporting]::executor[ebbf3213253c522e73a7fe9100000180abe8c3863e490940]",
      "id": 683,
      "state": "BLOCKED",
      "daemon": false,
      "system": "Reporting",
      "scope": "Gateway",
      "cpuUsage": 0,
      "lockedMonitors": [
        {
          "lock": "java.lang.String@38be24e8",
          "frame": "java.desktop@11.0.14.1/sun.font.SunFontManager.findJREDeferredFont(Unknown Source)"
        }
      ],
      "waitingFor": {
        "lock": "sun.awt.Win32FontManager@78b531a9",
        "owner": 684
      },
      "stacktrace": [
        "java.desktop@11.0.14.1/sun.font.SunFontManager.initialiseDeferredFont(Unknown Source)",
        "java.desktop@11.0.14.1/sun.font.SunFontManager.findJREDeferredFont(Unknown Source)",
        "java.desktop@11.0.14.1/sun.font.SunFontManager.findFont2D(Unknown Source)",
        "java.desktop@11.0.14.1/java.awt.Font.getFont2D(Unknown Source)",
        "java.desktop@11.0.14.1/java.awt.Font.canDisplay(Unknown Source)",
        "com.inductiveautomation.rm.text.RMFontFile.canDisplay(RMFontFile.java:327)",
        "com.inductiveautomation.rm.text.RMFont.canDisplay(RMFont.java:295)",
        "com.inductiveautomation.rm.text.RMXStringUtils.getRepresentableString(RMXStringUtils.java:159)",
        "com.inductiveautomation.rm.text.RMXString.getRepresentableString(RMXString.java:659)",
        "com.inductiveautomation.rm.text.RMTextLayout.layoutText(RMTextLayout.java:136)",
        "com.inductiveautomation.rm.text.RMTextLayout.layout(RMTextLayout.java:120)",
        "com.inductiveautomation.rm.shape.RMTextShape.getTextLayout(RMTextShape.java:803)",
        "com.inductiveautomation.rm.shape.RMTextShape.computePrefHeight(RMTextShape.java:874)",
        "com.inductiveautomation.rm.shape.RMShape.getPrefHeight(RMShape.java:2255)",
        "com.inductiveautomation.rm.shape.RMShape.getPrefHeight(RMShape.java:2244)",
        "com.inductiveautomation.rm.shape.RMTableRowRPG.computePrefHeight(RMTableRowRPG.java:470)",
        "com.inductiveautomation.rm.shape.RMShape.getPrefHeight(RMShape.java:2255)",
        "com.inductiveautomation.rm.shape.RMShape.getBestHeight(RMShape.java:2301)",
        "com.inductiveautomation.rm.shape.RMShape.getBestHeight(RMShape.java:2294)",
        "com.inductiveautomation.rm.shape.RMShape.setBestHeight(RMShape.java:2308)",
        "com.inductiveautomation.rm.shape.RMTableRowRPG.rpgAll(RMTableRowRPG.java:58)",
        "com.inductiveautomation.rm.shape.RMTableRPG.addRows(RMTableRPG.java:288)",
        "com.inductiveautomation.rm.shape.RMTableRPG.rpgTable(RMTableRPG.java:170)",
        "com.inductiveautomation.rm.shape.RMTableRPG.rpgWithScaling(RMTableRPG.java:101)",
        "com.inductiveautomation.rm.shape.RMTableGroupRPG.rpgAll(RMTableGroupRPG.java:66)",
        "com.inductiveautomation.rm.shape.RMTableGroup.rpgAll(RMTableGroup.java:339)",
        "com.inductiveautomation.rm.shape.ReportOwner.rpg(ReportOwner.java:178)",
        "com.inductiveautomation.rm.shape.RMParentShape.rpgChildren(RMParentShape.java:597)",
        "com.inductiveautomation.rm.shape.RMPage.rpgChildren(RMPage.java:696)",
        "com.inductiveautomation.rm.shape.RMParentShape.rpgAll(RMParentShape.java:584)",
        "com.inductiveautomation.rm.shape.RMPage.rpgAll(RMPage.java:659)",
        "com.inductiveautomation.rm.shape.ReportOwner.rpg(ReportOwner.java:178)",
        "com.inductiveautomation.rm.shape.RMDocument.rpgChildren(RMDocument.java:1091)",
        "com.inductiveautomation.rm.shape.RMParentShape.rpgAll(RMParentShape.java:584)",
        "com.inductiveautomation.rm.shape.ReportOwner.rpg(ReportOwner.java:178)",
        "com.inductiveautomation.rm.shape.ReportOwner.generateReport(ReportOwner.java:169)",
        "com.inductiveautomation.rm.shape.RMDocument.generateReport(RMDocument.java:1067)",
        "com.inductiveautomation.rm.shape.RMDocument.generateReport(RMDocument.java:1035)",
        "com.inductiveautomation.reporting.gateway.scheduler.ReportSchedulerTask.run(ReportSchedulerTask.java:215)",
        "app//it.sauronsoftware.cron4j.RunnableTask.execute(Unknown Source)",
        "app//it.sauronsoftware.cron4j.TaskExecutor$Runner.run(Unknown Source)",
        "java.base@11.0.14.1/java.lang.Thread.run(Unknown Source)"
      ]
    },
    {
      "name": "cron4j::scheduler[reporting]::executor[ebbf3213253c522e73a7fe9100000180abe8c38641c38b7d]",
      "id": 684,
      "state": "BLOCKED",
      "daemon": false,
      "system": "Reporting",
      "scope": "Gateway",
      "cpuUsage": 0,
      "lockedMonitors": [
        {
          "lock": "sun.awt.Win32FontManager@78b531a9",
          "frame": "java.desktop@11.0.14.1/sun.font.CompositeFont.doDeferredInitialisation(Unknown Source)"
        }
      ],
      "waitingFor": {
        "lock": "java.lang.String@38be24e8",
        "owner": 683
      },
      "stacktrace": [
        "java.desktop@11.0.14.1/sun.font.SunFontManager.findJREDeferredFont(Unknown Source)",
        "java.desktop@11.0.14.1/sun.font.SunFontManager.findFont2D(Unknown Source)",
        "java.desktop@11.0.14.1/sun.font.CompositeFont.doDeferredInitialisation(Unknown Source)",
        "java.desktop@11.0.14.1/sun.font.CompositeFont.getSlotFont(Unknown Source)",
        "java.desktop@11.0.14.1/sun.font.CompositeStrike.getStrikeForSlot(Unknown Source)",
        "java.desktop@11.0.14.1/sun.font.CompositeStrike.getFontMetrics(Unknown Source)",
        "java.desktop@11.0.14.1/sun.font.FontDesignMetrics.initMatrixAndMetrics(Unknown Source)",
        "java.desktop@11.0.14.1/sun.font.FontDesignMetrics.<init>(Unknown Source)",
        "java.desktop@11.0.14.1/sun.font.FontDesignMetrics.getMetrics(Unknown Source)",
        "java.desktop@11.0.14.1/sun.java2d.SunGraphics2D.getFontMetrics(Unknown Source)",
        "com.inductiveautomation.rm.text.RMFontFile.getMaxAscent(RMFontFile.java:228)",
        "com.inductiveautomation.rm.text.RMFontFile.getLineHeight(RMFontFile.java:259)",
        "com.inductiveautomation.rm.text.RMFont.getLineHeight(RMFont.java:239)",
        "com.inductiveautomation.rm.text.RMTextLayout.addLine(RMTextLayout.java:419)",
        "com.inductiveautomation.rm.text.RMTextLayout.addChars(RMTextLayout.java:200)",
        "com.inductiveautomation.rm.text.RMTextLayout.layoutText(RMTextLayout.java:145)",
        "com.inductiveautomation.rm.text.RMTextLayout.layout(RMTextLayout.java:120)",
        "com.inductiveautomation.rm.shape.RMTextShape.getTextLayout(RMTextShape.java:803)",
        "com.inductiveautomation.rm.shape.RMTextShape.computePrefHeight(RMTextShape.java:874)",
        "com.inductiveautomation.rm.shape.RMShape.getPrefHeight(RMShape.java:2255)",
        "com.inductiveautomation.rm.shape.RMSpringLayout$SnapSpringLayout.getPrefHeight(RMSpringLayout.java:211)",
        "com.inductiveautomation.rm.shape.RMSpringLayout$SnapSpringLayout.getPrefHeight(RMSpringLayout.java:114)",
        "com.inductiveautomation.snap.ui.SpringLayout.getBestHeight(SpringLayout.java:307)",
        "com.inductiveautomation.snap.ui.SpringSizer$Box.<init>(SpringSizer.java:195)",
        "com.inductiveautomation.snap.ui.SpringSizer.getChildBoxes(SpringSizer.java:66)",
        "com.inductiveautomation.snap.ui.SpringSizer.getPrefHeight(SpringSizer.java:45)",
        "com.inductiveautomation.snap.ui.SpringLayout.getPrefHeight(SpringLayout.java:203)",
        "com.inductiveautomation.rm.shape.RMSpringLayout.computePrefHeight(RMSpringLayout.java:52)",
        "com.inductiveautomation.rm.shape.RMParentShape.computePrefHeight(RMParentShape.java:410)",
        "com.inductiveautomation.rm.shape.RMTableRowRPG.computePrefHeight(RMTableRowRPG.java:466)",
        "com.inductiveautomation.rm.shape.RMShape.getPrefHeight(RMShape.java:2255)",
        "com.inductiveautomation.rm.shape.RMShape.getBestHeight(RMShape.java:2301)",
        "com.inductiveautomation.rm.shape.RMShape.getBestHeight(RMShape.java:2294)",
        "com.inductiveautomation.rm.shape.RMShape.setBestHeight(RMShape.java:2308)",
        "com.inductiveautomation.rm.shape.RMTableRowRPG.rpgAll(RMTableRowRPG.java:58)",
        "com.inductiveautomation.rm.shape.RMTableRPG.addRows(RMTableRPG.java:288)",
        "com.inductiveautomation.rm.shape.RMTableRPG.rpgTable(RMTableRPG.java:170)",
        "com.inductiveautomation.rm.shape.RMTableRPG.rpgWithScaling(RMTableRPG.java:101)",
        "com.inductiveautomation.rm.shape.RMTableGroupRPG.rpgAll(RMTableGroupRPG.java:66)",
        "com.inductiveautomation.rm.shape.RMTableGroup.rpgAll(RMTableGroup.java:339)",
        "com.inductiveautomation.rm.shape.ReportOwner.rpg(ReportOwner.java:178)",
        "com.inductiveautomation.rm.shape.RMParentShape.rpgChildren(RMParentShape.java:597)",
        "com.inductiveautomation.rm.shape.RMPage.rpgChildren(RMPage.java:696)",
        "com.inductiveautomation.rm.shape.RMParentShape.rpgAll(RMParentShape.java:584)",
        "com.inductiveautomation.rm.shape.RMPage.rpgAll(RMPage.java:659)",
        "com.inductiveautomation.rm.shape.ReportOwner.rpg(ReportOwner.java:178)",
        "com.inductiveautomation.rm.shape.RMDocument.rpgChildren(RMDocument.java:1091)",
        "com.inductiveautomation.rm.shape.RMParentShape.rpgAll(RMParentShape.java:584)",
        "com.inductiveautomation.rm.shape.ReportOwner.rpg(ReportOwner.java:178)",
        "com.inductiveautomation.rm.shape.ReportOwner.generateReport(ReportOwner.java:169)",
        "com.inductiveautomation.rm.shape.RMDocument.generateReport(RMDocument.java:1067)",
        "com.inductiveautomation.rm.shape.RMDocument.generateReport(RMDocument.java:1035)",
        "com.inductiveautomation.reporting.gateway.scheduler.ReportSchedulerTask.run(ReportSchedulerTask.java:215)",
        "app//it.sauronsoftware.cron4j.RunnableTask.execute(Unknown Source)",
        "app//it.sauronsoftware.cron4j.TaskExecutor$Runner.run(Unknown Source)",
        "java.base@11.0.14.1/java.lang.Thread.run(Unknown Source)"
      ]
    },
    {
      "name": "AsyncAppender-Worker-DBAsync",
      "id": 31,
      "state": "WAITING",
      "daemon": true,
      "system": "None",
      "scope": "Gateway",
      "cpuUsage": 0,
      "waitingFor": {
        "lock": "java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@43def0de"
      },
      "stacktrace": [
        "java.base@11.0.14.1/jdk.internal.misc.Unsafe.park(Native Method)",
        "java.base@11.0.14.1/java.util.concurrent.locks.LockSupport.park(Unknown Source)",
        "java.base@11.0.14.1/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(Unknown Source)",
        "java.base@11.0.14.1/java.util.concurrent.ArrayBlockingQueue.take(Unknown Source)",
        "app//ch.qos.logback.core.AsyncAppenderBase$Worker.run(AsyncAppenderBase.java:289)"
      ]
    }
  ]
}